import java.io.*;
import java.util.*;

class Main{
    static int m, n, min = Integer.MAX_VALUE;
	static int[][] map;
	static boolean[] open;
	static List<int[]> house;
	static List<int[]> chicken;
	
	public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        
        map = new int[n+1][n+1];
        house = new ArrayList<>();
        chicken = new ArrayList<>();
        
        for(int i = 1; i <= n; i++) {
        	st = new StringTokenizer(br.readLine());
        	for(int j = 1; j <= n; j++) {
        		map[i][j] = Integer.parseInt(st.nextToken());
        		
        		if(map[i][j] == 1) {
        			house.add(new int[] {i, j});
        		}
        		else if(map[i][j] == 2) {
        			chicken.add(new int[] {i, j});
        		}
        	}
        }
        open = new boolean[chicken.size()];
        
        dfs(0, 0);
        
        System.out.println(min);
	}
	
	static void dfs(int cnt, int start) {
		if(cnt == m) {
			int sum = 0;
			for(int i = 0; i < house.size(); i++) {
				int[] people = house.get(i);
				int digit = Integer.MAX_VALUE;
				
				for(int j = 0; j < chicken.size(); j++) {
					if(open[j]) {
						int diff = Math.abs(people[0] - chicken.get(j)[0]) + Math.abs(people[1] - chicken.get(j)[1]);
						digit = Math.min(digit,  diff);
					}
				}
				sum += digit;
			}
			
			
			min = Math.min(min, sum);
			return;
		}
		
		for(int i = start; i < chicken.size(); i++) {
			open[i] = true;
			dfs(cnt + 1, i + 1);
			open[i] = false;
		}
	}
}
