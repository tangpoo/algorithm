import java.io.*;
import java.util.*;

class Main{
    
    static int[][] map;
    static int[][] copymap;
    static int[] output;
    static ArrayList<CCTV> cctvList;
    static int[] dx = {-1, 0, 1, 0};
    static int[] dy = {0, 1, 0, -1};
    static int n, m;
    static int answer = Integer.MAX_VALUE;
    
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine(), " ");
        
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        
        map = new int[n][m];
        cctvList = new ArrayList<>();
        
        for(int i = 0; i < n; i++) {
        	st = new StringTokenizer(br.readLine(), " ");
        	for(int j = 0; j < m; j++) {
        		map[i][j] = Integer.parseInt(st.nextToken());
        		
        		if(map[i][j] != 0 && map[i][j] != 6) {
        			cctvList.add(new CCTV(map[i][j], i, j));
        		}
        	}
        }
        
        output = new int[cctvList.size()];
        permutation(0, cctvList.size());
        
        System.out.println(answer);
    }
    
    static void permutation(int depth, int r) {
    	if(depth == r) {
    		copymap = new int[n][m];
    		
    		for(int i = 0; i < n; i++) {
    			copymap[i] = map[i].clone();
    		}
    		
    		for(int i = 0; i < cctvList.size(); i++) {
    			direction(cctvList.get(i), output[i]);
    		}
    		
    		getBlindSpot();
    		
    		return;
    	}
    	
    	for(int i = 0; i < 4; i++) {
    		output[depth] = i;
    		permutation(depth + 1, r);
    	}
    }
    
    static void direction(CCTV cctv, int d) {
    	int cctvNum = cctv.num;
    	
    	if(cctvNum == 1) {
    		if(d == 0) watch(cctv, 0);
    		else if(d == 1) watch(cctv, 1);
    		else if(d == 2) watch(cctv, 2);
    		else if(d == 3) watch(cctv, 3);
    	}
    	else if(cctvNum == 2) {
    		if(d == 0 || d == 2) {
    			watch(cctv, 0); watch(cctv, 2);
    		}
    		else {
    			watch(cctv, 1); watch(cctv, 3);
    		}
    	}
    	else if(cctvNum == 3) {
    		if(d == 0) {
    			watch(cctv, 0);
    			watch(cctv, 1);
    		}
    		else if(d == 1) {
    			watch(cctv, 1);
    			watch(cctv, 2);
    		}
    		else if(d == 2) {
    			watch(cctv, 2);
    			watch(cctv, 3);
    		}
    		else if(d == 3) {
    			watch(cctv, 3);
    			watch(cctv, 0);
    		}
    	}
    	else if(cctvNum == 4) {
    		if(d == 0) {
    			watch(cctv, 3);
    			watch(cctv, 0);
    			watch(cctv, 1);
    		}
    		else if(d == 1) {
    			watch(cctv, 0);
    			watch(cctv, 1);
    			watch(cctv, 2);
    		}
    		else if(d == 2) {
    			watch(cctv, 1);
    			watch(cctv, 2);
    			watch(cctv, 3);
    		}
    		else if(d == 3) {
    			watch(cctv, 2);
    			watch(cctv, 3);
    			watch(cctv, 0);
    		}
    	}
    	else if(cctvNum == 5) {
    		watch(cctv, 0);
    		watch(cctv, 1);
    		watch(cctv, 2);
    		watch(cctv, 3);
    	}
    }
    
    static void watch(CCTV cctv, int d) {
    	Queue<CCTV> queue = new LinkedList<>();
    	boolean[][] visited = new boolean[n][m];
    	
    	queue.add(cctv);
    	visited[cctv.x][cctv.y] = true;
    	
    	while(!queue.isEmpty()) {
    		int nx = queue.peek().x + dx[d];
    		int ny = queue.poll().y + dy[d];
    		
    		if(nx < 0 || ny < 0 || nx >= n || ny >= m || copymap[nx][ny] == 6) {
    			break;
    		}
    		
    		if(copymap[nx][ny] == 0) {
    			copymap[nx][ny] = -1;
    			
    			queue.add(new CCTV(cctv.num, nx, ny));
    		}
    		else {
    			queue.add(new CCTV(cctv.num, nx, ny));
    		}
    	}
    }
    
    static void getBlindSpot() {
    	int cnt = 0;
    	for(int i = 0; i < n; i++) {
    		for(int j = 0; j < m; j++) {
    			if(copymap[i][j] == 0) {
    				cnt++;
    			}
    		}
    	}
    	answer = Math.min(answer,  cnt);
    }
}
class CCTV{
	int num;
	int x;
	int y;
	
	public CCTV(int num, int x, int y) {
		this.num = num;
		this.x = x;
		this.y = y;
	}
}
