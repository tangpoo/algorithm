import java.io.*;
import java.util.*;

class freetutorials{
	
	static int[] dx = {-1, 1, 0, 0, -1, -1, 1, 1};
	static int[] dy = {0, 0, -1, 1, -1, 1, 1, -1};
	
	public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        
        int N = Integer.parseInt(st.nextToken());
        int M = Integer.parseInt(st.nextToken());
        int K = Integer.parseInt(st.nextToken());
        
        int[][] lands = new int[N+1][N+1];
        int[][] robot = new int[N+1][N+1];
        Deque<Tree> trees = new LinkedList<>();
        
        for(int i = 1; i <= N; i++) {
        	st = new StringTokenizer(br.readLine());
        	
        	for(int j = 1; j <= N; j++) {
        		robot[i][j] = Integer.parseInt(st.nextToken());
        		lands[i][j] = 5;
        	}
        }
        
        for(int i = 0; i < M; i++) {
        	st = new StringTokenizer(br.readLine());
        	
        	int x = Integer.parseInt(st.nextToken());
        	int y = Integer.parseInt(st.nextToken());
        	int age = Integer.parseInt(st.nextToken());
        	
        	trees.add(new Tree(x, y, age));
        }
        
        while(K --> 0) {
        	Queue<Tree> deadTrees = new LinkedList<>();
        	
        	// 봄
        	for(int i = 0; i < trees.size();) {
        		Tree cur = trees.poll();
        		
        		if(lands[cur.x][cur.y] >= cur.age) {
        			lands[cur.x][cur.y] -= cur.age;
        			cur.age++;
        			i++;
        			trees.add(cur);
        		} else {
        			deadTrees.add(cur);
        		}
        	}
        	
        	// 여름
        	for(Tree t : deadTrees) {
        		lands[t.x][t.y] += t.age / 2; 
        	}
        	
        	// 가을
        	Queue<Tree> newTree = new LinkedList<>();
        	for(Tree t : trees) {
        		if(t.age % 5 == 0) {
        			newTree.add(t);
        		}
        	}
        	
        	while(!newTree.isEmpty()) {
        		Tree t = newTree.poll();
        		
        		for(int i = 0; i < 8; i++) {
        			int nx = dx[i] + t.x;
        			int ny = dy[i] + t.y;
        			
        			if(nx >= 1 && ny >= 1 && nx <= N && ny <= N) {
        				trees.addFirst(new Tree(nx, ny, 1));
        			}
        		}
        	}
        	
        	// 겨울
        	for(int i = 1; i <= N; i++) {
        		for(int j = 1; j <= N; j++) {
        			lands[i][j] += robot[i][j];
        		}
        	}
        }
        
        System.out.println(trees.size());
	}
}
class Tree implements Comparable<Tree>{
	int x, y, age;
	
	public Tree(int x, int y, int age) {
		super();
		this.x = x;
		this.y = y;
		this.age = age;
	}
	
	@Override
	public int compareTo(Tree o) {
		return this.age - o.age;
	}
}
